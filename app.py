{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Assignment #4: Basic UI\n",
    "\n",
    "DS4003 | Spring 2024\n",
    "\n",
    "Objective: Practice buidling basic UI components in Dash. \n",
    "\n",
    "Task: Build an app that contains the following components user the gapminder dataset: `gdp_pcap.csv`. [Info](https://www.gapminder.org/gdp-per-capita/)\n",
    "\n",
    "UI Components:\n",
    "A dropdown menu that allows the user to select `country`\n",
    "-   The dropdown should allow the user to select multiple countries\n",
    "-   The options should populate from the dataset (not be hard-coded)\n",
    "A slider that allows the user to select `year`\n",
    "-   The slider should allow the user to select a range of years\n",
    "-   The range should be from the minimum year in the dataset to the maximum year in the dataset\n",
    "A graph that displays the `gdpPercap` for the selected countries over the selected years\n",
    "-   The graph should display the gdpPercap for each country as a line\n",
    "-   Each country should have a unique color\n",
    "-   Graph DOES NOT need to interact with dropdown or slider\n",
    "-   The graph should have a title and axis labels in reader friendly format  \n",
    "\n",
    "Layout:  \n",
    "- Use a stylesheet\n",
    "- There should be a title at the top of the page\n",
    "- There should be a description of the data and app below the title (3-5 sentences)\n",
    "- The dropdown and slider should be side by side above the graph and take up the full width of the page\n",
    "- The graph should be below the dropdown and slider and take up the full width of the page\n",
    "\n",
    "Submission: \n",
    "- There should be only one app in your submitted work\n",
    "- Comment your code\n",
    "- Submit the html file of the notebook save as `DS4003_A4_LastName.html`\n",
    "\n",
    "\n",
    "**For help you may use the web resources and pandas documentation. No co-pilot or ChatGPT.**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Import Dependencies\n",
    "import pandas as pd\n",
    "import plotly.express as px\n",
    "from dash import Dash, dcc, html, Input, Output, callback"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "        <iframe\n",
       "            width=\"100%\"\n",
       "            height=\"650\"\n",
       "            src=\"http://127.0.0.1:8050/\"\n",
       "            frameborder=\"0\"\n",
       "            allowfullscreen\n",
       "            \n",
       "        ></iframe>\n",
       "        "
      ],
      "text/plain": [
       "<IPython.lib.display.IFrame at 0x2616a1d8070>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "stylesheets = ['https://codepen.io/chriddyp/pen/bWLwgP.css'] # load the CSS stylesheet\n",
    "\n",
    "app = Dash(__name__, external_stylesheets=stylesheets) # initialize the app\n",
    "\n",
    "# use pandas to read in data\n",
    "df = pd.read_csv(\"gdp_pcap.csv\")\n",
    "\n",
    "# pivot gdp data long so that we can graph it\n",
    "gdp_long = df.melt(id_vars = 'country', \n",
    "                          value_vars = [str(year) for year in range(1800, 2101)], # generate a list of strings for each year from 1800 to 2100\n",
    "                          var_name = 'year',\n",
    "                          value_name = 'gdp')\n",
    "\n",
    "# Define a function that parses through the 'gdp' column to look for values containing the string 'k' and replace\n",
    "# those strings with an empty space, converting to float, and multiplying by 1000.\n",
    "# Referenced: https://stackoverflow.com/questions/39684548/convert-the-string-2-90k-to-2900-or-5-2m-to-5200000-in-pandas-dataframe\n",
    "def value_to_float(x):\n",
    "    if type(x) == float or type(x) == int:\n",
    "        return x\n",
    "    if 'k' in x:\n",
    "        if len(x) > 1:\n",
    "            return float(x.replace('k', '')) * 1000\n",
    "        return 1000.0\n",
    "    else:\n",
    "        return int(x)\n",
    "\n",
    "gdp_long['gdp'] = gdp_long['gdp'].apply(value_to_float)\n",
    "\n",
    "\n",
    "#Define Layout\n",
    "app.layout = html.Div([\n",
    "     html.Div([\n",
    "        html.H1(\"GDP Analysis Dashboard\"),  # Title\n",
    "        html.P(\"This dashboard allows a user to explore the GDP per Capita data of different countries from 1800 to 2100.\" \n",
    "               \"The dashboard contains a dropdown and a slider feature that allow a user to select multiple different \"\n",
    "                 \"countries (or just one) that they wish the focus on, as well as a range slider for a specific time period with\"\n",
    "                 \"which to analyze the selected countries. It is important to note that the data extends past present day,\"\n",
    "                 \"these values serve as estimates based on current growth rates.\"),  # Description\n",
    "    ]),\n",
    "\n",
    "    html.Div([],\n",
    "             style={'height': '20px'}),  # Add space between description and slider/dropdown\n",
    "\n",
    "    html.Div(dcc.RangeSlider(\n",
    "        min=int(gdp_long[\"year\"].min()), # selects the minimum year value from the melted dataset\n",
    "        max=int(gdp_long[\"year\"].max()), # selects the maximum year value from the melted dataset\n",
    "        step=25, #sets step values of 25 (to fit everything and not look too messy)\n",
    "        value=[1900,2000],  # Default value range\n",
    "        marks={year: str(year) for year in list(range(1800, 2101,25))},  # Set marks for slider labels\n",
    "        id='year-select'\n",
    "    ), className=\"six columns\"), # takes up half a row\n",
    "\n",
    "\n",
    "    html.Div(dcc.Dropdown(\n",
    "            id = 'country-dropdown',\n",
    "            options = df.country,\n",
    "            value =  [''], # Default of nothing selected\n",
    "            multi = True # this makes dropdown multi-select\n",
    "            ), className=\"five columns\"), # had to make it five instead of six because otherwise the dashboard\n",
    "                                            # had the dropdown on the next line, not sure why\n",
    "\n",
    "    html.Div(dcc.Graph(\n",
    "        id='graph-with-slider-and-dropdown'\n",
    "    ), className = 'twelve columns' # takes up entire row\n",
    "    ),\n",
    "], className = 'row')\n",
    "\n",
    "\n",
    "# define callbacks\n",
    "@app.callback(\n",
    "    Output('graph-with-slider-and-dropdown','figure'),\n",
    "    Input('country-dropdown','value'),\n",
    "    Input('year-select','value'))\n",
    "\n",
    "def update_figure(selected_countries,selected_years):\n",
    "    filtered_df = gdp_long #this is probably redundant\n",
    "    \n",
    " # Convert 'year' column to integers\n",
    "    filtered_df['year'] = filtered_df['year'].astype(int)\n",
    "\n",
    "    # Filter by selected countries\n",
    "    if selected_countries:\n",
    "        filtered_df = filtered_df[filtered_df['country'].isin(selected_countries)]\n",
    "    \n",
    "    # Filter by selected years\n",
    "    if selected_years:\n",
    "        filtered_df = filtered_df[(filtered_df['year'] >= selected_years[0]) & (filtered_df['year'] <= selected_years[1])]\n",
    "    \n",
    "    # Create line chart with filtered data\n",
    "    fig = px.line(filtered_df, x='year', y='gdp', color='country', title='GDP Per Capita of Selected Countries')\n",
    "    \n",
    "    # Update layout\n",
    "    fig.update_layout(\n",
    "        xaxis_title=\"Year\",\n",
    "        yaxis_title=\"GDP Per Capita\"\n",
    "    )\n",
    "    \n",
    "    return fig\n",
    "\n",
    "\n",
    "# run app\n",
    "if __name__ == '__main__':\n",
    "    app.run(debug=True)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "ds4003",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.18"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
